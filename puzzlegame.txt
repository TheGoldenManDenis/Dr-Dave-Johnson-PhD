MODE 13:DRAW1,1:CLS
PROCsetviewwidthheight

width%=16
height%=25
PROCreconfigurewidth
DIM screen% view_width%*view_height%
DIM collapsed%(view_width%)
x%=0:y%=0:ox%=0:oy%=0:t%=111:gameover%=FALSE:redrawpiece%=TRUE:score%=0:matchlimit%=4:null%=-1:boardsize%=1:finished%=FALSE
PROCsymbols
OFF

PROCtitlescreen

REPEAT
 CASE FNmenu("Dr. Dave Johnson PhD","Start game ("+FNboardstring(boardsize%)+" board);Board size;Best scores;Quit",-1) OF
  WHEN 0
   VDU30
   PROCresetgame
   PROCgame
  WHEN 1
   boardsize%=FNmenu("Board size","Small;Normal;Big;Biggest;Deluxe",boardsize%)
   IF boardsize%<4 THEN
    width%=(boardsize%+1)*8
    height%=25
   ELSE
    width%=view_width%-3
    height%=view_height%-4
   ENDIF
   PROCreconfigurewidth
  WHEN 2
   REM CLS:PROCmessage("Not implemented"):WAIT(100)
   PROCshowhighscores(boardsize%)
  WHEN 3
   PROCfullscreenmessage("DBZ FOREVER!!! !!! !!! !!!")
   finished%=TRUE
  WHEN 4
   INPUT "test value" test%
   PROChighscoreentry(test%,boardsize%)
 ENDCASE
UNTIL finished%

END

DEFPROCgame
 LOCAL gameover%,won%
 PROCredrawscreen 
 REPEAT
  REPEAT
   PROCcollapse:PROCprocess
  UNTIL actions%=0
  IF FNcheckfilled THEN won%=TRUE ELSE PROCturn
 UNTIL gameover% OR won%
 VDU30,10
 IF NOT gameover% THEN
  PROCmessage("You successfully built the wall.")
 ELSE
  PROCmessage("You have lost. GAME OVER")
 ENDIF
 WAIT(100)
 PROCmessage("Press any key to continue"):actions%=GET
 IF NOT gameover% THEN PROChighscoreentry(score%,boardsize%)
ENDPROC

DEFPROCredrawscreen
 PROCbackground
 LOCAL i%,j%
 VDU30
 i%=0
 WHILE i%<y_view_offset%
  VDU10:i%+=1
 ENDWHILE
 FOR j%=0 TO height%-1
  i%=0
  WHILE i%<x_view_offset%
   VDU9:i%+=1
  ENDWHILE
  FOR i%=0 TO width%-1
   PROCvd(screen%?((width%*j%)+i%))
  NEXT
  PRINT
 NEXT
 VDU30:COLOUR 71:COLOUR 100+128
 WHILE VPOS<1
  VDU32
 ENDWHILE
 PROCscore(FNcheckfilled)
ENDPROC

DEFPROCturn
 x%=x_piece_origin%:ox%=x_piece_origin%:y%=0:oy%=0:redrawpiece%=TRUE
 piece$=FNRanch+FNRanch+FNRanch+FNRanch
 LOCAL i%,j%,done%
 FOR i%=0 TO 1
  FOR j%=0 TO 1
   IF FNget(i%+x%,j%+y%):gameover%=TRUE
  NEXT
 NEXT
 IF gameover% THEN ENDPROC
 REPEAT
  TIME=0
  REPEAT
   PROCinput:PROCmove:WAIT(1)
  UNTIL TIME>t%
  IF FNcanmoveY(x%,y%+2) THEN oy%=y%:y%=y%+1:PROCmove ELSE done%=TRUE
 UNTIL done%
 WAIT(5)
ENDPROC

DEFPROCmove
 IF (ox%=x% AND oy%=y%) AND redrawpiece%=FALSE THEN ENDPROC
 LOCAL i%,j%,ppiece$
 FOR i%=0 TO 1
  FOR j%=0 TO 1
   PROCset(ox%+i%,oy%+j%,0)
  NEXT
 NEXT
 ppiece$=piece$
 FOR j%=0 TO 1
  FOR i%=0 TO 1
   PROCset(x%+i%,y%+j%,ASC( MID$(ppiece$,1,1) ) )
   ppiece$=MID$(ppiece$,2,3)+MID$(ppiece$,1,1)
  NEXT
 NEXT
 ox%=x%:oy%=y%
 redrawpiece%=FALSE
ENDPROC

DEFPROCinput
 LOCAL k$:k$=FNtolowercase(INKEY(5))
 CASE k$ OF
  REM ========== game controls ==========
  WHEN "z":
   IF FNcanmove(x%-1,y%) THEN ox%=x%:x%-=1
  WHEN "x":
   IF FNcanmove(x%+2,y%) THEN ox%=x%:x%+=1
  WHEN "/":
   TIME=t%
  WHEN "'":
   piece$=MID$(piece$,3,1) + MID$(piece$,1,1) + MID$(piece$,4,1) + MID$(piece$,2,1)
   redrawpiece%=TRUE
   PROCmove
  WHEN "q"
   IF FNmenu("End current game?","No;Yes",-1) THEN RUN
   PROCredrawscreen
  REM ========== debug & testing controls ==========
  WHEN "r":PROCredrawscreen
  WHEN "t":PROCrandomfill:TIME=t%
  WHEN "y":PROCstructuretest
  WHEN "e":PROCdebugeditor
 ENDCASE
 IF x%<0 THEN x%=0
 IF x%>width%-2 THEN x%=width%
 REM IF y%>height%-2 THEN y%=height%-2
ENDPROC

DEFPROCcollapseOLD
 LOCAL i%,j%,sorted%,donestuff%
 FOR i%=0 TO width%-1
  REPEAT
   sorted%=TRUE
   FOR j%=height%-2 TO 0 STEP -1
    IF FNget(i%,j%)>0 AND FNget(i%,j%+1)=0 THEN
     PROCset(i%,j%+1,FNget(i%,j%))
     PROCset(i%,j%,0)
     sorted%=FALSE
     donestuff%=TRUE
     WAIT(1)
     REM OSCLI("beep -l 10"): REM test
    ENDIF
   NEXT
  UNTIL sorted%
 NEXT
 IF donestuff% THEN WAIT(10)
ENDPROC

DEFPROCcollapse
 LOCAL i%,j%,sorted%,allsorted%,donestuff%
 FOR i%=0 TO width%: collapsed%(i%)=FALSE: NEXT
 REPEAT
  allsorted%=TRUE
  FOR i%=0 TO width%-1
   IF NOT collapsed%(i%) THEN
    allsorted%=FALSE
    sorted%=TRUE
    FOR j%=height%-2 TO 0 STEP -1
     IF FNget(i%,j%)>0 AND FNget(i%,j%+1)=0 THEN
      PROCset(i%,j%+1,FNget(i%,j%))
      PROCset(i%,j%,0)
      sorted%=FALSE
      donestuff%=TRUE
     ENDIF
    NEXT j%
    IF sorted% THEN collapsed%(i%)=TRUE
   ENDIF
   REM WAIT(4): REM test
  NEXT i%
  WAIT(4)
 UNTIL allsorted%
 IF donestuff% THEN WAIT(10)
ENDPROC

DEFPROCprocess
 actions%=0
 LOCAL i%,j%,tile%,done%
 FOR j%=height%-1 TO 0 STEP -1
  done%=TRUE
  FOR i%=0 TO width%-1
   tile%=FNget(i%,j%)
   IF (tile% AND 127)>0 THEN
    done%=FALSE
    IF (tile% AND 128)=0 THEN PROCcount_and_burst(i%,j%)
   ENDIF
  NEXT
  IF done% THEN j%=0
 NEXT
 IF actions%>0 THEN WAIT(40): PROCclearmark: WAIT(20+FNcheckfilled)
 PROCclearstatus
ENDPROC

DEFPROCcount_and_burst(x%,y%)
 LOCAL tile%,count%
 tile%=FNget(x%,y%)
 PROCccount(x%,y%)
 IF count%>=matchlimit% THEN
  actions%+=1: PROCscore(10+count%)
  tile%=128 OR tile%
  PROCmmark(x%,y%)
  WAIT(2)
 ENDIF
ENDPROC
DEFPROCccount(x%,y%)
 IF x%>width%-1 OR y%>height%-1 OR x%<0 OR y%<0 THEN ENDPROC: REM test
 count%+=1
 PROCsetND(x%,y%,128 OR FNget(x%,y%))
 IF FNget(x%-1,y%  )=tile% THEN PROCccount(x%-1,y%  )
 IF FNget(x%  ,y%-1)=tile% THEN PROCccount(x%  ,y%-1)
 IF FNget(x%+1,y%  )=tile% THEN PROCccount(x%+1,y%  )
 IF FNget(x%  ,y%+1)=tile% THEN PROCccount(x%  ,y%+1)
ENDPROC
DEFPROCmmark(x%,y%)
 IF x%>width%-1 OR y%>height%-1 OR x%<0 OR y%<0 THEN ENDPROC: REM test
 PROCset(x%,y%,128)
 IF FNget(x%-1,y%  )=tile% THEN PROCmmark(x%-1,y%  )
 IF FNget(x%  ,y%-1)=tile% THEN PROCmmark(x%  ,y%-1)
 IF FNget(x%+1,y%  )=tile% THEN PROCmmark(x%+1,y%  )
 IF FNget(x%  ,y%+1)=tile% THEN PROCmmark(x%  ,y%+1)
ENDPROC

DEFPROCclearstatus
 LOCAL i%
 FOR i%=0 TO (width%*height%)
  screen%?i%=screen%?i% AND 127
 NEXT
ENDPROC
DEFPROCclearmark
 LOCAL i%,j%
 FOR j%=height%-1 TO 0 STEP -1
  FOR i%=0 TO width%-1
   IF FNget(i%,j%)=128 THEN
    PROCset(i%,j%,0)
   ENDIF
  NEXT
 NEXT
ENDPROC
DEFPROCresetgame
 LOCAL i%
 FOR i%=0 TO (width%*height%)
  screen%?i%=0
 NEXT
 score%=0
ENDPROC

DEF FNRanch:=CHR$(1+RND(4))
DEFFNcanmove(x%,y%)
 IF x%<0 OR y%<0 THEN =FALSE
 IF x%>width%-1 OR y%>height%-1 THEN =FALSE
 LOCAL r%:r%=TRUE
 IF FNget(x%,y%)>0 THEN r%=FALSE
 IF FNget(x%,y%+1)>0 THEN r%=FALSE
=r%
DEFFNcanmoveY(x%,y%)
 IF x%<0 OR y%<0 THEN =FALSE
 IF x%>width%-1 OR y%>height%-1 THEN =FALSE
 LOCAL r%:r%=TRUE
 IF FNget(x%,y%) THEN r%=FALSE
 IF FNget(x%+1,y%) THEN r%=FALSE
=r%

DEFFNtolowercase(k%)
 IF k%>64 AND k%<91 THEN k%=k% OR 32
=CHR$k%

DEFPROCset(x%,y%,in%)
 IF x%>width%-1 OR y%>height%-1 OR x%<0 OR y%<0 THEN STOP: CLS: PRINT x% y% in%:END
 REM IF x%>width%-1 OR y%>height%-1 OR x%<0 OR y%<0 THEN ENDPROC: REM test
 screen%?((width%*y%)+x%)=in%
 VDU31,x%+x_view_offset%,y%+y_view_offset%
 PROCvd(in%)
ENDPROC
DEFPROCsetND(x%,y%,in%)
 IF x%>width%-1 OR y%>height%-1 OR x%<0 OR y%<0 THEN STOP: CLS: PRINT x% y% in%:END
 REM IF x%>width%-1 OR y%>height%-1 OR x%<0 OR y%<0 THEN ENDPROC
 screen%?((width%*y%)+x%)=in%
ENDPROC
DEFFNget(x%,y%)
=screen%?((width%*y%)+x%)

DEFPROCvd(in%)
 CASE in% OF
  WHEN 0
   COLOUR 128
  WHEN 1
   COLOUR 19
   COLOUR 19+128
  WHEN 2
   COLOUR 38
   COLOUR 38+128
  WHEN 3
   COLOUR 71
   COLOUR 71+128
  WHEN 4
   COLOUR 100
   COLOUR 100+128
  OTHERWISE
   COLOUR 1
   COLOUR 255
 ENDCASE
 IF in%>31 THEN
  VDU in%
 ELSE
  VDU 224+in%
 ENDIF
 COLOUR 128
ENDPROC

DEFPROCbackground
 VDU30
 LOCAL adjust%:adjust%=4
 COLOUR 128+adjust%
 FOR i%=1 TO (view_width%+1)*(view_height%+1)
  IF (i%+VPOS)MOD2 THEN COLOUR adjust% ELSE COLOUR adjust%-2:
  VDU 226
 NEXT
 VDU 30,11
 FOR i%=0 TO ((view_width%+1)*2)-1
  IF (i%+VPOS)MOD2 THEN COLOUR adjust% ELSE COLOUR adjust%-2:
  VDU 226
  REM WAIT(10)
 NEXT
 VDU30
 COLOUR 128
 COLOUR 3
ENDPROC

DEFPROCrandomfill
 LOCAL i%,j%
  FOR i%=height%-1 TO 0 STEP -1
   FOR j%=0 TO width%-1
    PROCset(j%,i%,RND(5))
   NEXT
  NEXT
ENDPROC

DEFPROCsymbols
 VDU 23,224, 0  ,0  ,0  ,0  ,0  ,0  ,0  ,0
 VDU 23,225, 0  ,126,66 ,90 ,82 ,66 ,126,0
 VDU 23,226, 0  ,90 ,36 ,66 ,66 ,36 ,90 ,0
 VDU 23,227, 36 ,36 ,195,0  ,0  ,195,36 ,36
 VDU 23,228, 85 ,0  ,85 ,0  ,85 ,0  ,85 ,0
 VDU 23,229, 28 ,34 ,34 ,120,32 ,32 ,126,0
ENDPROC

DEFPROCscore(add%)
 COLOUR 71
 COLOUR 100+128
 score%=score%+add%
 PRINT TAB(0,0)" Losses: "+CHR$(229);score%;" "
ENDPROC

DEFPROCstructuretest
 LOCAL xx%,yy%,tile%,i%
 WAIT(40)
 FOR i%=1 TO 4
  REPEAT
   xx%=RND(width%)
   yy%=RND(height%)
   tile%=FNget(xx%,yy%)
  UNTIL tile%>0
  PROCset(xx%,yy%,128) 
  WAIT(40)
 NEXT
 WAIT(40)
 PROCclearmark
 WAIT(80)
 REPEAT
  PROCcollapse:PROCprocess
 UNTIL actions%=0
ENDPROC

DEFPROCdebugeditor
 LOCAL k$,x%,y%,c%:ON
 REPEAT
  VDU31,0,1:COLOUR127:PRINT;" ";FNcheckfilled;" ";
  VDU31,0,0:PROCvd(c%)
  VDU31,x%+x_view_offset%,y%+y_view_offset%
  k$=FNtolowercase(GET)
  CASE k$ OF
   WHEN "z"
    x%-=1
   WHEN "c"
    x%+=1
   WHEN "s"
    y%-=1
   WHEN "x"
    y%+=1
   WHEN "'"
    c%+=1
   WHEN "/"
    c%-=1
   WHEN CHR$13
    PROCset(x%,y%,c%)
   WHEN " "
    PROCset(x%,y%,0)
   WHEN "p"
    c%=FNget(x%,y%)
   WHEN "t"
    PROCpatternfill
  ENDCASE
 UNTIL k$="q"
 OFF:VDU30:PROCredrawscreen:done%=TRUE
ENDPROC

DEFPROCmessage(text$)
 LOCAL position%
 WHILE POS>0
  VDU8
 ENDWHILE
 COLOUR 127
 position%=1+(view_width%-LENtext$)DIV2
 WHILE POS<position%
  VDU9
 ENDWHILE
 PRINT text$ 
ENDPROC
DEFPROCtitlescreen
 LOCAL key%
 PROCbackground
 VDU30
 PRINT'
 PROCmessage("::::::::::::::::::::::::::::::")
 PROCmessage("::                          ::")
 PROCmessage("::   Dr. Dave Johnson PhD   ::")
 PROCmessage("::   written by Patrick M   ::")
 PROCmessage("::                          ::")
 PROCmessage("::::::::::::::::::::::::::::::")
 PRINT'
 PROCmessage("It's the year 2176. You are")
 PROCmessage("Dr. Dave Johnson PhD, a contractor")
 PROCmessage("for a construction company.")
 PRINT
 PROCmessage("Your job is to build a wall.")
 PROCmessage("The wall must be built with four")
 PROCmessage("special materials. The materials")
 PROCmessage("react with each other, so you")
 PROCmessage("must space them out evenly.")
 PRINT
 PROCmessage("The materials are expensive")
 PROCmessage("so you must avoid wasting them.")
 PROCmessage("")
 PRINT
 PROCmessage("  Controls:  ")
 PROCmessage("             ")
 PROCmessage("   Z X / '   ")
 PRINT'
 PROCmessage("Press a key to begin")
 key%=GET
ENDPROC

DEFFNcheckfilled
 LOCAL i%,j%,count%
 result%=TRUE
 FOR j%=0 TO height%-1
  FOR i%=0 TO width%-1
   IF FNget(i%,j%) THEN count%+=1
  NEXT
 NEXT
 COLOUR 71:COLOUR 100+128: PRINTTAB(view_width%-15,0)"Complete: "; LEFT$(STR$(  100*(count%/filltarget%)  ),4) ;"%"
IF count%>=filltarget% THEN =TRUE ELSE =FALSE

DEFPROCpatternfill
 LOCAL i%,j%
  FOR i%=height%-1 TO 0 STEP -1
   FOR j%=0 TO width%-1
    PROCset(j%,i%,1+((j%+i%)MOD2) )
   NEXT
  NEXT
ENDPROC


DEFFNmenu(title$,options$,currentchoice%)
 LOCAL i%,j%,temp$,k$,choice%,o%,cursor%,oldcursor%:choice%=-1
 PROCbackground
 COLOUR 127:COLOUR 128
 VDU30,10,10,10
 FOR i%=0 TO view_height%-6
  VDU9,9,9
  FOR j%=0 TO view_width%-6
   VDU32
  NEXT
  PRINT
 NEXT
 REM ==========
 WHILE LEN(temp$)<LEN(title$)+6
  temp$+=":"
 ENDWHILE
 VDU30,10,10,10,10
 PROCmessage(temp$)
 PROCmessage(":: "+title$+" ::")
 PROCmessage(temp$)
 PRINT'

 VDU31,6,9
 FOR i%=1 TO LENoptions$
  IF (MID$(options$,i%,1)=";") THEN
   o%=o%+1
   VDU31,6,9+(o%*2)
  ELSE
   PRINT ;MID$(options$,i%,1);
  ENDIF
 NEXT
 
 IF currentchoice%>-1 THEN
  VDU31,5,9+(currentchoice%*2):PROCvd(2)
 ENDIF

 WHILE choice%<0
  COLOUR 127:COLOUR 128
  VDU31,4,9+(oldcursor%*2),32
  VDU31,4,9+(cursor%*2):PROCvd(1)
  oldcursor%=cursor%
  k$=FNtolowercase(GET)
  IF (k$="'") THEN cursor%=cursor%-1
  IF (k$="/") THEN cursor%=cursor%+1
  IF cursor%<0 THEN cursor%=o%
  IF cursor%>o% THEN cursor%=0
  IF (k$=CHR$13) THEN choice%=cursor%
 ENDWHILE
 currentchoice%=choice%
=choice%

FNboardsize(in%)
 LOCAL out%
 CASE in% OF
  WHEN 0
   out%=8
  WHEN 1
   out%=16
  WHEN 2
   out%=24
  WHEN 3
   out%=32
 ENDCASE
=out%

DEFPROCreconfigurewidthOLD
 x_view_offset%=12
 y_view_offset%=3
 x_view_offset%=(view_width%-width%)DIV2
 y_view_offset%=1+((view_height%-1)-height%)DIV2
 x_piece_origin%=(width%-2)DIV2
 filltarget%=(height%-4)*width%
ENDPROC

DEFPROCreconfigurewidth
 REM view_width%=40
 REM view_height%=31
 x_view_offset%=12
 y_view_offset%=3
 x_view_offset%=1+(view_width%-width%)DIV2
 y_view_offset%=2+((view_height%-1)-height%)DIV2
 x_piece_origin%=(width%-2)DIV2
 filltarget%=(height%-4)*width%
ENDPROC

DEFPROCsetviewwidthheight
 LOCAL a%,b%
 VDU30:b%=POS:REPEAT:a%=b%:VDU32:b%=POS:UNTIL b%<a%
 view_width%=a%
 VDU30:b%=VPOS:REPEAT:a%=b%:VDU10:b%=VPOS:UNTIL b%=a%
 view_height%=a%
 CLS
 PRINT;view_width%;" x ";view_height%;'
ENDPROC

DEFPROCfullscreenmessage(text$)
 LOCAL i%,null%,lines%,position%,string$
 PROCbackground
 FOR i%=1 TO LENtext$
  IF (MID$(text$,i%,1)=";") THEN
   lines%+=1   
  ENDIF
 NEXT
 position%=-(lines%DIV2)+(view_height%)DIV2
 VDU30
 WHILE VPOS<position%
  VDU10
 ENDWHILE
 FOR i%=1 TO LENtext$
  IF (MID$(text$,i%,1)=";") THEN
   PROCmessage(string$):string$=""
  ELSE
   string$+=MID$(text$,i%,1)
  ENDIF
 NEXT
 PROCmessage(string$)
 VDU10
 null%=GET
ENDPROC

DEFPROCblackwindow(subtraction%)
 PROCbackground
 IF subtraction%<1 THEN subtraction%=1
 COLOUR 127:COLOUR 128
 LOCAL i%,j%,z%
 VDU30
 FOR z%=1 TO subtraction%: VDU10: NEXT
 FOR i%=0 TO view_height%-(subtraction%*2)
  FOR z%=1 TO subtraction%: VDU9: NEXT
  FOR j%=0 TO view_width%-(subtraction%*2)
   VDU32
  NEXT
  PRINT
 NEXT
ENDPROC

DEFFNboardstring(in%)
 LOCAL out$
 CASE in% OF
  WHEN 0
   out$="Small"
  WHEN 1
   out$="Normal"
  WHEN 2
   out$="Big"
  WHEN 3
   out$="Biggest"
  WHEN 4
   out$="Deluxe"
  OTHERWISE
   out$="BadValue"
 ENDCASE
=out$

DEFPROCcreatescoretablefile(boardsize%)
 LOCAL i%,file%
 file%=OPENOUT("highscores_"+STR$boardsize%)
 FOR i%=1 TO 9
  BPUT#file%,"--------------------9999999";
 NEXT
 CLOSE#file%
ENDPROC

DEFPROCshowhighscores(boardsize%)
 IF boardsize%>3 THEN PROCfullscreenmessage("The best score table;is not available for the;current board size.;;Press any key to continue"):ENDPROC
 LOCAL file%,i%
 file%=OPENIN("highscores_"+STR$boardsize%) 
 IF file%=0 THEN
  PROCcreatescoretablefile(boardsize%)
  file%=OPENIN("highscores_"+STR$boardsize%)
 ENDIF
 PROCblackwindow(3)
 VDU31,5,5
 PROCmessage("Best scores - "+FNboardstring(boardsize%)+" board")
 VDU31,5,7
 PRINT"Name                   Score"
 FOR i%=1 TO 9
  VDU31,5,8+(i%*2)
  FOR j%=1 TO 20
   VDU BGET#file%
  NEXT
   VDU32,32,32
  FOR j%=1 TO 7
   VDU BGET#file%
  NEXT
 NEXT
 CLOSE#file%
 file%=GET
ENDPROC

DEFPROChighscoreentry(score%,boardsize%)
 IF boardsize%>3 THEN ENDPROC
 LOCAL file%,i%,j%,z%,string$,lesspointer%,blockpointer%,entry$,scorestring$:lesspointer%=10
 file%=OPENIN("highscores_"+STR$boardsize%)
 IF file%=0 THEN
  PROCcreatescoretablefile(boardsize%)
  file%=OPENIN("highscores_"+STR$boardsize%)
 ENDIF
 WHILE NOT EOF#file%
  screen%?blockpointer%=BGET#file%
  blockpointer%+=1
 ENDWHILE
 CLOSE#file%
 blockpointer%=0
 file%=OPENUP("highscores_"+STR$boardsize%)
 FOR i%=1 TO 9
  FOR j%=1 TO 20
   z%=BGET#file%
  NEXT
  string$=""
  FOR j%=1 TO 7
   string$=string$+CHR$(BGET#file%)
  NEXT
  IF score%<VAL(string$) THEN lesspointer%=i%: i%=10
 NEXT
 
 IF lesspointer%>9 THEN CLOSE#file%:ENDPROC

 PROCbackground:VDU30
 WHILE VPOS<view_height%DIV2
  VDU10
 ENDWHILE
 PROCmessage("You have gained a")
 PROCmessage("position in the high score table.")
 PROCmessage("")
 PROCmessage("Please enter your name:")
 WHILE POS<(view_width%-20)DIV2:VDU9:ENDWHILE:PRINT;"                    ":VDU13,11
 WHILE POS<(view_width%-20)DIV2:VDU9:ENDWHILE:INPUT entry$
 entry$=LEFT$(entry$,20)
 WHILE LENentry$<20
  entry$=entry$+" "
 ENDWHILE
 IF score%>9999999 THEN score%=9999999
 scorestring$=STR$(score%)
 WHILE LENscorestring$<7
  scorestring$=" "+scorestring$
 ENDWHILE

 PTR#file%=0
 FOR i%=1 TO 9
  IF lesspointer%=i% THEN
   BPUT#file%,entry$;
   BPUT#file%,scorestring$;
  ELSE
   FOR j%=0 TO (20+7)-1
    BPUT#file%,screen%?(blockpointer%+j%)
   NEXT
   blockpointer%+=20+7
  ENDIF
 NEXT
 CLOSE#file%
 PROCshowhighscores(boardsize%)
ENDPROC
